// Copyright 2020 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.https://ondewo.slack.com/archives/CAWPP61NY

syntax = "proto3";

package ondewo.s2t;
import "google/protobuf/empty.proto";

// endpoints of speech-to-text service
service Speech2Text {
    rpc TranscribeFile (TranscribeFileRequest) returns (TranscribeFileResponse) {
    };
    rpc TranscribeStream (stream TranscribeStreamRequest) returns (stream TranscribeStreamResponse) {
    };
    rpc GetS2tPipeline (S2tPipelineId) returns (Speech2TextConfig) {
    };
    rpc CreateS2tPipeline (Speech2TextConfig) returns (S2tPipelineId) {
    };
    rpc DeleteS2tPipeline (S2tPipelineId) returns (google.protobuf.Empty) {
    };
    rpc UpdateS2tPipeline (Speech2TextConfig) returns (google.protobuf.Empty) {
    };
    rpc ListS2tPipelines (ListS2tPipelinesRequest) returns (ListS2tPipelinesResponse) {
    };
    rpc ListS2tLanguages (ListS2tLanguagesRequest) returns (ListS2tLanguagesResponse) {
    };
    rpc ListS2tDomains (ListS2tDomainsRequest) returns (ListS2tDomainsResponse) {
    };
}

///////////////////////
// TRANSCRIBE STREAM //
///////////////////////

message TranscribeStreamRequest {
    string s2t_pipeline_id = 1; // id of the pipeline (model setup) that will generate audio
    bytes audio_chunk = 2; // wav file to transcribe
    CTCDecoding ctc_decoding = 3; // CTC decoding type
    bool spelling_correction = 4;
    bool end_of_stream = 5;
}


message TranscribeStreamResponse {
    string transcription = 1;
    float time = 2;
    bool final = 3;
}

/////////////////////
// TRANSCRIBE FILE //
/////////////////////

message TranscribeFileRequest {
    string s2t_pipeline_id = 1; // id of the pipeline (model setup) that will generate audio
    bytes audio_file = 2; // wav file to transcribe
    CTCDecoding ctc_decoding = 3; // CTC decoding type
    bool spelling_correction = 4;
    bool include_timing = 5;
}

enum CTCDecoding {
    GREEDY = 0;
    BEAM_SEARCH_WITH_LM = 1;
}

message TranscribeFileResponse {
    string transcription = 1;
    float time = 2;
    repeated WordTiming word_timing = 3;
}

message WordTiming {
    string word = 1;
    int32 begin = 2;
    int32 end = 3;
}

//////////////////////
// GET S2T PIPELINE //
//////////////////////

message S2tPipelineId {
    string id = 1; // id of the model that will generate audio
}

////////////////////////
// LIST S2T PIPELINES //
////////////////////////

message ListS2tPipelinesRequest {
    repeated string languages = 1;
    repeated string pipeline_owners = 2;
    repeated string domains = 3;
}

message ListS2tPipelinesResponse {
    repeated Speech2TextConfig pipeline_configs = 1;
}

////////////////////////
// LIST S2T LANGUAGES //
////////////////////////

message ListS2tLanguagesRequest {
    repeated string domains = 1;
    repeated string pipeline_owners = 2;
}

message ListS2tLanguagesResponse {
    repeated string languages = 1;
}

//////////////////////
// LIST S2T DOMAINS //
//////////////////////

message ListS2tDomainsRequest {
    repeated string languages = 1;
    repeated string pipeline_owners = 2;
}

message ListS2tDomainsResponse {
    repeated string domains = 1;
}

///////////////////////////////////
// SPEECH-2-TEXT PIPELINE CONFIG //
///////////////////////////////////

message Speech2TextConfig {
    string id = 1;
    Description description = 2;
    bool active = 3;
    Inference inference = 4;
    StreamingServer streaming_server = 5;
    VoiceActivityDetection voice_activity_detection = 6;
    PostProcessing post_processing = 7;
    Logging logging = 8;
}

message Description {
    string language = 1;
    string pipeline_owner = 2;
    string domain = 3;
    string comments = 4;
}

message Inference {
    CtcAcousticModels ctc_acoustic_models = 1;
    LanguageModel language_model = 2;
}

message CtcAcousticModels {
    string type = 1;
    Quartznet quartznet = 2;
    QuartznetTriton quartznet_triton = 3;
    Wav2Vec wav2vec = 4;
}

message Wav2Vec {
    string model_path = 1;
    bool use_gpu = 2;
}

message Quartznet {
    string config_path = 1;
    string load_type = 2;
    PtFiles pt_files = 3;
    CkptFile ckpt_file = 4;
}

message PtFiles {
    string path = 1;
    string step = 2;
}

message CkptFile {
    string path = 1;
}

message QuartznetTriton {
    string config_path = 1;
    string triton_url = 2;
    string triton_model = 3;
}

message LanguageModel {
    string path = 1;
    int64 beam_size = 2;
    float beam_search_scorer_alpha = 3;
    float beam_search_scorer_beta = 4;
}

message StreamingServer {
    string host = 1;
    int64 port = 2;
    string output_style = 3;
    StreamingSpeechRecognition streaming_speech_recognition = 4;
}

message StreamingSpeechRecognition {
    bool transcribe_not_final = 1;
    string ctc_decoding_method = 2;
    int64 sampling_rate = 3;
    int64 min_audio_chunk_size = 4;
    float start_of_utterance_threshold = 5;
    float end_of_utterance_threshold = 6;

}

message VoiceActivityDetection {
    string active = 1;
    int64 sampling_rate = 2;
    Pyannote pyannote = 3;
    Matchbox matchbox = 4;
}

message Pyannote {
    string model_path = 1;
    int64 min_audio_size = 2;
    float offset = 3;
    float onset = 4;
    bool log_scale = 5;
    float min_duration_off = 6;
    float min_duration_on = 7;
}

message Matchbox {
    string model_config = 1;
    string encoder_path = 2;
    string decoder_path = 3;
}

message PostProcessing {
    repeated string pipeline = 1;
    PostProcessors post_processors = 2;
}

message PostProcessors {
    SymSpell sym_spell = 1;
    Normalization normalization = 2;
}

message SymSpell {
    string dict_path = 1;
    int64 max_dictionary_edit_distance = 2;
    int64 prefix_length = 3;
}

message Normalization {
    string language = 1;
}

message Logging {
    string type = 1;
    string path = 2;
}